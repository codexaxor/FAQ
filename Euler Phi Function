#include<bits/stdc++.h>
using namespace std;
#define fst ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define rd freopen("input.txt","r",stdin)
#define wr freopen("output.txt","w",stdout)


int PrimeCount;
vector<int> prime;

const int MAX = 10000009;
bool Check(int N,int pos){return (bool)(N & (1<<pos));}
int Set(int N,int pos){	return N=N | (1<<pos);}
int status[MAX];
void sieve()
{
     int i, j, sqrtN;
     sqrtN = int( sqrt( MAX ) );
     for( i = 3; i <= sqrtN; i += 2 )
     {
		 if( Check(status[i>>5],i&31)==0)
		 {
	 		 for( j = i*i; j <= MAX; j += 2*i )
			 {
				 status[j>>5]=Set(status[j>>5],j&31);
	 		 }
		 }
	 }
	 prime.push_back(2);
	 for(i=3;i<=MAX;i+=2)
	 {
	 	if( Check(status[i>>5],i&31)==0)
	 	 {
	 	 	prime.push_back(i);
	 	 	PrimeCount++;
	 	 }
	 }
}

///////////////// Euler Totient Function //////////////

int EulerPhi(long long int n){

    int res = n;
	int root = sqrt(n);

	for (int i = 0; i < PrimeCount && prime[i] <= root; ++i)
	{
		int PowerCounter=0;

		if (n % prime[i] == 0)
			{
				while( n % prime[i] == 0)
				{
					PowerCounter++;
					n/=prime[i];
				}

				root = sqrt(n);  /// optimization

                res /= prime[i];
                res *= (prime[i] - 1);

			}
	}

	if (n!=1)
	{
		res /= n;
        res *= (n - 1);
	}

    return res;
}


int main()
{
    sieve();

    long long int n;
    while(cin>>n){
    	cout<<EulerPhi(n)<<endl;
    }

return 0;
}
